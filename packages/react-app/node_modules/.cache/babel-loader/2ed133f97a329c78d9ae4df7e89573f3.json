{"ast":null,"code":"// NOTE: We explicitly export the symbols in the root index.ts file to have better control over package's public API.\nexport { ChainId, BNB, BUSD, DEFAULT_SUPPORTED_CHAINS, Dai, ERC20, ERC20Interface, ERC20Mock, ERC20MockInterface, Ether, KovanDai, KovanEther, MultiCall, MultiCall2, MultiCall2ABI, MultiCallABI, NATIVE_CURRENCY, TestBNB, TestBUSD } from './constants';\nexport { DAppProvider, getStoredTransactionState, multicall, multicall2, useBlockNumber, useConfig, useInjectedNetwork, useNetwork, useUpdateConfig, NetworkActivator, NetworkProvider, BlockNumberProvider, BlockNumberContext, ConfigContext, ConfigProvider, InjectedNetworkProvider, MultiChainStateProvider, MultiChainStatesContext, blockNumberReducer, callsReducer, chainStateReducer, DEFAULT_NOTIFICATIONS, DEFAULT_STORED_TRANSACTIONS, useMultiChainStates, useTransactionsContext, useNotificationsContext } from './providers';\nexport { useBlockMeta, useCall, useCalls, useChainMeta, useContractFunction, useEtherBalance, useEthers, useGasPrice, useLookupAddress, useMulticallAddress, useNotifications, useSendTransaction, useToken, useTokenAllowance, useTokenBalance, useTokenList, useTransactions, // To be removed from public API:\nuseContractCall, useContractCalls, useChainCall, useChainCalls, useChainState, connectContractToSigner, useDebounce, useLocalStorage, useDebouncePair, useInterval } from './hooks';\nexport { Currency, CurrencyValue, FiatCurrency, NativeCurrency, Token, transactionErrored } from './model';\nexport * from './model/chain';\nexport { addressEqual, compareAddress, shortenAddress, shortenIfAddress, shortenIfTransactionHash, shortenTransactionHash, // To be removed from public API:\nwarnOnInvalidCall, getChainById, encodeCallData, decodeCallResult, getChainMeta, isLocalChain, isTestChain, getChainName, getUniqueCalls, getExplorerAddressLink, getExplorerTransactionLink } from './helpers';","map":{"version":3,"sources":["../../../src/index.ts"],"names":[],"mappings":"AAAA;AAEA,SACE,OADF,EAEE,GAFF,EAGE,IAHF,EAME,wBANF,EAOE,GAPF,EAQE,KARF,EASE,cATF,EAUE,SAVF,EAWE,kBAXF,EAYE,KAZF,EAcE,QAdF,EAeE,UAfF,EAgBE,SAhBF,EAiBE,UAjBF,EAkBE,aAlBF,EAmBE,YAnBF,EAqBE,eArBF,EAuBE,OAvBF,EAwBE,QAxBF,QAyBO,aAzBP;AA0BA,SACE,YADF,EAaE,yBAbF,EAcE,SAdF,EAeE,UAfF,EAgBE,cAhBF,EAiBE,SAjBF,EAkBE,kBAlBF,EAmBE,UAnBF,EAoBE,eApBF,EAyBE,gBAzBF,EA0BE,eA1BF,EA2BE,mBA3BF,EA8BE,kBA9BF,EAgCE,aAhCF,EAiCE,cAjCF,EAkCE,uBAlCF,EAoCE,uBApCF,EAqCE,uBArCF,EAsCE,kBAtCF,EAuCE,YAvCF,EAwCE,iBAxCF,EAyCE,qBAzCF,EA0CE,2BA1CF,EA2CE,mBA3CF,EA4CE,sBA5CF,EA6CE,uBA7CF,QA8CO,aA9CP;AA+CA,SAIE,YAJF,EAKE,OALF,EAME,QANF,EAOE,YAPF,EAQE,mBARF,EASE,eATF,EAUE,SAVF,EAWE,WAXF,EAYE,gBAZF,EAaE,mBAbF,EAcE,gBAdF,EAeE,kBAfF,EAgBE,QAhBF,EAiBE,iBAjBF,EAkBE,eAlBF,EAmBE,YAnBF,EAqBE,eArBF,EAsBE;AACA,eAvBF,EAwBE,gBAxBF,EAyBE,YAzBF,EA0BE,aA1BF,EA2BE,aA3BF,EA4BE,uBA5BF,EA6BE,WA7BF,EA8BE,eA9BF,EA+BE,eA/BF,EAgCE,WAhCF,QAiCO,SAjCP;AAkCA,SACE,QADF,EAEE,aAFF,EAGE,YAHF,EAIE,cAJF,EAKE,KALF,EASE,kBATF,QAUO,SAVP;AAWA,cAAc,eAAd;AACA,SAEE,YAFF,EAGE,cAHF,EAIE,cAJF,EAKE,gBALF,EAME,wBANF,EAOE,sBAPF,EAQE;AACA,iBATF,EAUE,YAVF,EAWE,cAXF,EAYE,gBAZF,EAaE,YAbF,EAcE,YAdF,EAeE,WAfF,EAgBE,YAhBF,EAiBE,cAjBF,EAkBE,sBAlBF,EAmBE,0BAnBF,QAoBO,WApBP","sourceRoot":"","sourcesContent":["// NOTE: We explicitly export the symbols in the root index.ts file to have better control over package's public API.\nexport { ChainId, BNB, BUSD, DEFAULT_SUPPORTED_CHAINS, Dai, ERC20, ERC20Interface, ERC20Mock, ERC20MockInterface, Ether, KovanDai, KovanEther, MultiCall, MultiCall2, MultiCall2ABI, MultiCallABI, NATIVE_CURRENCY, TestBNB, TestBUSD, } from './constants';\nexport { DAppProvider, getStoredTransactionState, multicall, multicall2, useBlockNumber, useConfig, useInjectedNetwork, useNetwork, useUpdateConfig, NetworkActivator, NetworkProvider, BlockNumberProvider, BlockNumberContext, ConfigContext, ConfigProvider, InjectedNetworkProvider, MultiChainStateProvider, MultiChainStatesContext, blockNumberReducer, callsReducer, chainStateReducer, DEFAULT_NOTIFICATIONS, DEFAULT_STORED_TRANSACTIONS, useMultiChainStates, useTransactionsContext, useNotificationsContext, } from './providers';\nexport { useBlockMeta, useCall, useCalls, useChainMeta, useContractFunction, useEtherBalance, useEthers, useGasPrice, useLookupAddress, useMulticallAddress, useNotifications, useSendTransaction, useToken, useTokenAllowance, useTokenBalance, useTokenList, useTransactions, \n// To be removed from public API:\nuseContractCall, useContractCalls, useChainCall, useChainCalls, useChainState, connectContractToSigner, useDebounce, useLocalStorage, useDebouncePair, useInterval, } from './hooks';\nexport { Currency, CurrencyValue, FiatCurrency, NativeCurrency, Token, transactionErrored, } from './model';\nexport * from './model/chain';\nexport { addressEqual, compareAddress, shortenAddress, shortenIfAddress, shortenIfTransactionHash, shortenTransactionHash, \n// To be removed from public API:\nwarnOnInvalidCall, getChainById, encodeCallData, decodeCallResult, getChainMeta, isLocalChain, isTestChain, getChainName, getUniqueCalls, getExplorerAddressLink, getExplorerTransactionLink, } from './helpers';\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}