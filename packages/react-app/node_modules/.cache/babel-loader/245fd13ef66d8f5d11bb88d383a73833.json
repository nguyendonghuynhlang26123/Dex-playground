{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, InjectedNetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\n/**\n * Provides basic services for a DApp.\n * @public\n */\n\nexport function DAppProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\n\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\n\nconst getMulticall2Addresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    multicallAddresses,\n    networks,\n    multicallVersion\n  } = useConfig();\n  const defaultAddresses = useMemo(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);\n  const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(ReadonlyNetworksProvider, {\n    children: _jsx(NetworkProvider, {\n      children: _jsx(InjectedNetworkProvider, {\n        children: _jsx(BlockNumberProvider, {\n          children: _jsxs(BlockNumbersProvider, {\n            children: [_jsx(NetworkActivator, {}), _jsx(LocalMulticallProvider, {\n              children: _jsx(MultiChainStateProvider, Object.assign({\n                multicallAddresses: multicallAddressesMerged\n              }, {\n                children: _jsx(NotificationsProvider, {\n                  children: _jsx(TransactionProvider, {\n                    children: children\n                  })\n                })\n              }))\n            })]\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"sources":["../../../../src/providers/DAppProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, InjectedNetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({ config, children }) {\n    return (_jsx(ConfigProvider, Object.assign({ config: config }, { children: _jsx(DAppProviderWithConfig, { children: children }) })));\n}\nconst getMulticallAddresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => (result[network.chainId] = network.multicallAddress));\n    return result;\n};\nconst getMulticall2Addresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => {\n        if (network.multicall2Address) {\n            result[network.chainId] = network.multicall2Address;\n        }\n    });\n    return result;\n};\nfunction DAppProviderWithConfig({ children }) {\n    const { multicallAddresses, networks, multicallVersion } = useConfig();\n    const defaultAddresses = useMemo(() => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)), [networks, multicallVersion]);\n    const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n    return (_jsx(ReadonlyNetworksProvider, { children: _jsx(NetworkProvider, { children: _jsx(InjectedNetworkProvider, { children: _jsx(BlockNumberProvider, { children: _jsxs(BlockNumbersProvider, { children: [_jsx(NetworkActivator, {}), _jsx(LocalMulticallProvider, { children: _jsx(MultiChainStateProvider, Object.assign({ multicallAddresses: multicallAddressesMerged }, { children: _jsx(NotificationsProvider, { children: _jsx(TransactionProvider, { children: children }) }) })) })] }) }) }) }) }));\n}\n//# sourceMappingURL=DAppProvider.js.map"]},"metadata":{},"sourceType":"module"}