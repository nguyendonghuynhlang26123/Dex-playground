{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\n\nexport function useTransactions() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chainId: defaultChainId,\n    account\n  } = useEthers();\n  const {\n    addTransaction,\n    transactions\n  } = useTransactionsContext();\n  const {\n    chainId: _chainId\n  } = queryParams;\n  const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n  const filtered = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(x => x.transaction.from === account);\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useTransactions.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAEA,SAAS,sBAAT,QAAuC,cAAvC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;AAEG;;AACH,OAAM,SAAU,eAAV,GAAuD;AAAA,MAA7B,WAA6B,uEAAF,EAAE;AAC3D,QAAM;AAAE,IAAA,OAAO,EAAE,cAAX;AAA2B,IAAA;AAA3B,MAAuC,SAAS,EAAtD;AACA,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA;AAAlB,MAAmC,sBAAsB,EAA/D;AACA,QAAM;AAAE,IAAA,OAAO,EAAE;AAAX,MAAwB,WAA9B;AAEA,QAAM,OAAO,GAAG,OAAO,CAAC,MAAM,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,cAAnB,EAAmC,CAAC,QAAD,EAAW,cAAX,CAAnC,CAAvB;AAEA,QAAM,QAAQ,GAAG,OAAO,CAAC,MAAK;;;AAC5B,QAAI,OAAO,KAAK,SAAZ,IAAyB,CAAC,OAA9B,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAO,CAAC,CAAA,EAAA,GAAA,YAAY,CAAC,OAAD,CAAZ,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,EAA1B,EAA8B,MAA9B,CAAsC,CAAD,IAAO,CAAC,CAAC,WAAF,CAAc,IAAd,KAAuB,OAAnE,CAAP;AACD,GALuB,EAKrB,CAAC,YAAD,EAAe,OAAf,EAAwB,OAAxB,CALqB,CAAxB;AAOA,SAAO;AACL,IAAA,YAAY,EAAE,QADT;AAEL,IAAA;AAFK,GAAP;AAID","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\nexport function useTransactions(queryParams = {}) {\n    const { chainId: defaultChainId, account } = useEthers();\n    const { addTransaction, transactions } = useTransactionsContext();\n    const { chainId: _chainId } = queryParams;\n    const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n    const filtered = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter((x) => x.transaction.from === account);\n    }, [transactions, chainId, account]);\n    return {\n        transactions: filtered,\n        addTransaction,\n    };\n}\n//# sourceMappingURL=useTransactions.js.map"]},"metadata":{},"sourceType":"module"}