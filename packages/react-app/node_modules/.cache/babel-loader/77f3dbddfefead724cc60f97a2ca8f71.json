{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers, useLocalStorage } from '../hooks';\nimport { useConfig } from './config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useInjectedNetwork } from './network/injectedNetwork';\nexport function NetworkActivator(_ref) {\n  let {\n    providerOverride\n  } = _ref;\n  const {\n    activate,\n    activateBrowserWallet,\n    chainId: connectedChainId\n  } = useEthers();\n  const {\n    readOnlyChainId,\n    readOnlyUrls,\n    autoConnect,\n    pollingInterval\n  } = useConfig();\n  const injectedProvider = useInjectedNetwork();\n  const [shouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [readonlyConnected, setReadonlyConnected] = useState(false);\n  useEffect(() => {\n    if (providerOverride) {\n      activate(providerOverride);\n    }\n  }, [providerOverride]);\n  useEffect(() => {\n    if (readOnlyChainId && readOnlyUrls && !providerOverride) {\n      if (readOnlyUrls[readOnlyChainId] && connectedChainId !== readOnlyChainId) {\n        const provider = new JsonRpcProvider(readOnlyUrls[readOnlyChainId]);\n        provider.pollingInterval = pollingInterval;\n        activate(provider).then(() => setReadonlyConnected(true));\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls]);\n  useEffect(() => {\n    shouldConnectMetamask && autoConnect && injectedProvider && !providerOverride && readonlyConnected && activateBrowserWallet();\n  }, [readonlyConnected]);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/providers/NetworkActivator.tsx"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,EAAoB,eAApB,QAA2C,UAA3C;AACA,SAAS,SAAT,QAA0B,UAA1B;AACA,SAAS,eAAT,QAAgC,0BAAhC;AACA,SAAS,kBAAT,QAAmC,2BAAnC;AAMA,OAAM,SAAU,gBAAV,OAAsE;AAAA,MAA3C;AAAE,IAAA;AAAF,GAA2C;AAC1E,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,qBAAZ;AAAmC,IAAA,OAAO,EAAE;AAA5C,MAAiE,SAAS,EAAhF;AACA,QAAM;AAAE,IAAA,eAAF;AAAmB,IAAA,YAAnB;AAAiC,IAAA,WAAjC;AAA8C,IAAA;AAA9C,MAAkE,SAAS,EAAjF;AACA,QAAM,gBAAgB,GAAG,kBAAkB,EAA3C;AACA,QAAM,CAAC,qBAAD,IAA0B,eAAe,CAAC,uBAAD,CAA/C;AACA,QAAM,CAAC,iBAAD,EAAoB,oBAApB,IAA4C,QAAQ,CAAC,KAAD,CAA1D;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,gBAAJ,EAAsB;AACpB,MAAA,QAAQ,CAAC,gBAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAAC,gBAAD,CAJM,CAAT;AAMA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,eAAe,IAAI,YAAnB,IAAmC,CAAC,gBAAxC,EAA0D;AACxD,UAAI,YAAY,CAAC,eAAD,CAAZ,IAAiC,gBAAgB,KAAK,eAA1D,EAA2E;AACzE,cAAM,QAAQ,GAAG,IAAI,eAAJ,CAAoB,YAAY,CAAC,eAAD,CAAhC,CAAjB;AACA,QAAA,QAAQ,CAAC,eAAT,GAA2B,eAA3B;AACA,QAAA,QAAQ,CAAC,QAAD,CAAR,CAAmB,IAAnB,CAAwB,MAAM,oBAAoB,CAAC,IAAD,CAAlD;AACD;AACF;AACF,GARQ,EAQN,CAAC,eAAD,EAAkB,YAAlB,CARM,CAAT;AAUA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,qBAAqB,IACnB,WADF,IAEE,gBAFF,IAGE,CAAC,gBAHH,IAIE,iBAJF,IAKE,qBAAqB,EALvB;AAMD,GAPQ,EAON,CAAC,iBAAD,CAPM,CAAT;AASA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers, useLocalStorage } from '../hooks';\nimport { useConfig } from './config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useInjectedNetwork } from './network/injectedNetwork';\nexport function NetworkActivator({ providerOverride }) {\n    const { activate, activateBrowserWallet, chainId: connectedChainId } = useEthers();\n    const { readOnlyChainId, readOnlyUrls, autoConnect, pollingInterval } = useConfig();\n    const injectedProvider = useInjectedNetwork();\n    const [shouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n    const [readonlyConnected, setReadonlyConnected] = useState(false);\n    useEffect(() => {\n        if (providerOverride) {\n            activate(providerOverride);\n        }\n    }, [providerOverride]);\n    useEffect(() => {\n        if (readOnlyChainId && readOnlyUrls && !providerOverride) {\n            if (readOnlyUrls[readOnlyChainId] && connectedChainId !== readOnlyChainId) {\n                const provider = new JsonRpcProvider(readOnlyUrls[readOnlyChainId]);\n                provider.pollingInterval = pollingInterval;\n                activate(provider).then(() => setReadonlyConnected(true));\n            }\n        }\n    }, [readOnlyChainId, readOnlyUrls]);\n    useEffect(() => {\n        shouldConnectMetamask &&\n            autoConnect &&\n            injectedProvider &&\n            !providerOverride &&\n            readonlyConnected &&\n            activateBrowserWallet();\n    }, [readonlyConnected]);\n    return null;\n}\n//# sourceMappingURL=NetworkActivator.js.map"]},"metadata":{},"sourceType":"module"}