{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nexport const getProvidersFromConfig = readOnlyUrls => fromEntries(Object.entries(readOnlyUrls).map(_ref => {\n  let [chainId, url] = _ref;\n  return [chainId, new JsonRpcProvider(url)];\n}));\nexport function ReadonlyNetworksProvider(_ref2) {\n  let {\n    providerOverrides = {},\n    children\n  } = _ref2;\n  const {\n    readOnlyUrls = {}\n  } = useConfig();\n  const [providers, setProviders] = useState(() => Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  useEffect(() => {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, [JSON.stringify(readOnlyUrls)]);\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: providers\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/readonlyNetworks/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;AACA,SAAS,eAAT,QAAgC,0BAAhC;AACA,SAAS,SAAT,QAA0B,cAA1B;AAEA,SAAS,uBAAT,QAAwC,WAAxC;AAEA,SAAS,WAAT,QAA4B,8BAA5B;AAOA,OAAO,MAAM,sBAAsB,GAAI,YAAD,IACpC,WAAW,CAAC,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,GAA7B,CAAiC;AAAA,MAAC,CAAC,OAAD,EAAU,GAAV,CAAD;AAAA,SAAoB,CAAC,OAAD,EAAU,IAAI,eAAJ,CAAoB,GAApB,CAAV,CAApB;AAAA,CAAjC,CAAD,CADN;AAGP,OAAM,SAAU,wBAAV,QAA6F;AAAA,MAA1D;AAAE,IAAA,iBAAiB,GAAG,EAAtB;AAA0B,IAAA;AAA1B,GAA0D;AACjG,QAAM;AAAE,IAAA,YAAY,GAAG;AAAjB,MAAwB,SAAS,EAAvC;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAY,MAAM,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvD,sBAAsB,CAAC,YAAD,CADiC,CAAA,EAEvD,iBAFuD,CAAlB,CAA1C;AAKA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,sBAAsB,CAAC,YAAD,CAA5B,CAAA,EAA+C,iBAA/C,CAAA,CAAZ;AACD,GAFQ,EAEN,CAAC,IAAI,CAAC,SAAL,CAAe,YAAf,CAAD,CAFM,CAAT;AAIA,SAAO,IAAA,CAAC,uBAAuB,CAAC,QAAzB,EAAiC,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE;AAAR,GAAA,EAAiB;AAAA,IAAA,QAAA,EAAG;AAAH,GAAjB,CAAjC,CAAP;AACD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nexport const getProvidersFromConfig = (readOnlyUrls) => fromEntries(Object.entries(readOnlyUrls).map(([chainId, url]) => [chainId, new JsonRpcProvider(url)]));\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }) {\n    const { readOnlyUrls = {} } = useConfig();\n    const [providers, setProviders] = useState(() => (Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides)));\n    useEffect(() => {\n        setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n    }, [JSON.stringify(readOnlyUrls)]);\n    return _jsx(ReadonlyNetworksContext.Provider, Object.assign({ value: providers }, { children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}