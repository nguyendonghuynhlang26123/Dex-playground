{"ast":null,"code":"import { useCallback } from 'react';\nimport { useInjectedNetwork, useNetwork } from '../providers';\nimport { useLocalStorage } from './useLocalStorage';\n/**\n * @public\n */\n\nexport function useEthers() {\n  const {\n    network: {\n      provider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate\n  } = useNetwork();\n  const {\n    injectedProvider,\n    connect\n  } = useInjectedNetwork();\n  const [, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const result = {\n    connector: undefined,\n    library: provider,\n    chainId,\n    account: accounts[0],\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    deactivate: () => {\n      deactivate();\n      setShouldConnectMetamask(false);\n    },\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error: errors[errors.length - 1]\n  };\n  const activateBrowserWallet = useCallback(async () => {\n    if (!injectedProvider) {\n      return;\n    }\n\n    await connect();\n    await result.activate(injectedProvider);\n    setShouldConnectMetamask(true);\n  }, [injectedProvider]);\n  return Object.assign(Object.assign({}, result), {\n    activateBrowserWallet\n  });\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,OAA5B;AAEA,SAAS,kBAAT,EAA6B,UAA7B,QAA+C,cAA/C;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAyBA;;AAEG;;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB,QAAM;AACJ,IAAA,OAAO,EAAE;AAAE,MAAA,QAAF;AAAY,MAAA,OAAZ;AAAqB,MAAA,QAArB;AAA+B,MAAA;AAA/B,KADL;AAEJ,IAAA,UAFI;AAGJ,IAAA;AAHI,MAIF,UAAU,EAJd;AAKA,QAAM;AAAE,IAAA,gBAAF;AAAoB,IAAA;AAApB,MAAgC,kBAAkB,EAAxD;AACA,QAAM,GAAG,wBAAH,IAA+B,eAAe,CAAC,uBAAD,CAApD;AAEA,QAAM,MAAM,GAAG;AACb,IAAA,SAAS,EAAE,SADE;AAEb,IAAA,OAAO,EAAE,QAFI;AAGb,IAAA,OAHa;AAIb,IAAA,OAAO,EAAE,QAAQ,CAAC,CAAD,CAJJ;AAKb,IAAA,MAAM,EAAE,CAAC,CAAC,QALG;AAMb,IAAA,QAAQ,EAAE,MAAO,mBAAP,IAAkD;AAC1D,UAAI,iBAAiB,mBAArB,EAA0C;AACxC,QAAA,OAAO,CAAC,IAAR,CAAa,gFAAb;AACA,cAAM,mBAAmB,CAAC,QAApB,EAAN;AACA,eAAO,QAAQ,CAAC,MAAM,mBAAmB,CAAC,WAApB,EAAP,CAAf;AACD;;AACD,aAAO,QAAQ,CAAC,mBAAD,CAAf;AACD,KAbY;AAcb,IAAA,UAAU,EAAE,MAAK;AACf,MAAA,UAAU;AACV,MAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,KAjBY;AAmBb,IAAA,QAAQ,EAAE,MAAK;AACb,YAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD,KArBY;AAuBb,IAAA,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB;AAvBA,GAAf;AA0BA,QAAM,qBAAqB,GAAG,WAAW,CAAC,YAAW;AACnD,QAAI,CAAC,gBAAL,EAAuB;AACrB;AACD;;AACD,UAAM,OAAO,EAAb;AACA,UAAM,MAAM,CAAC,QAAP,CAAgB,gBAAhB,CAAN;AACA,IAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GAPwC,EAOtC,CAAC,gBAAD,CAPsC,CAAzC;AASA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,MAAZ,CAAA,EAAkB;AAAE,IAAA;AAAF,GAAlB,CAAA;AACD","sourceRoot":"","sourcesContent":["import { useCallback } from 'react';\nimport { useInjectedNetwork, useNetwork } from '../providers';\nimport { useLocalStorage } from './useLocalStorage';\n/**\n * @public\n */\nexport function useEthers() {\n    const { network: { provider, chainId, accounts, errors }, deactivate, activate, } = useNetwork();\n    const { injectedProvider, connect } = useInjectedNetwork();\n    const [, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n    const result = {\n        connector: undefined,\n        library: provider,\n        chainId,\n        account: accounts[0],\n        active: !!provider,\n        activate: async (providerOrConnector) => {\n            if ('getProvider' in providerOrConnector) {\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                await providerOrConnector.activate();\n                return activate(await providerOrConnector.getProvider());\n            }\n            return activate(providerOrConnector);\n        },\n        deactivate: () => {\n            deactivate();\n            setShouldConnectMetamask(false);\n        },\n        setError: () => {\n            throw new Error('setError is deprecated');\n        },\n        error: errors[errors.length - 1],\n    };\n    const activateBrowserWallet = useCallback(async () => {\n        if (!injectedProvider) {\n            return;\n        }\n        await connect();\n        await result.activate(injectedProvider);\n        setShouldConnectMetamask(true);\n    }, [injectedProvider]);\n    return Object.assign(Object.assign({}, result), { activateBrowserWallet });\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}