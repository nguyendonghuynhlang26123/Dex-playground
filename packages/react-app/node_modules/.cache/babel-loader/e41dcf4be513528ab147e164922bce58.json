{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { InjectedNetworkContext } from './context';\nimport { getInjectedProvider } from '../../../helpers/injectedProvider';\nimport { useNetwork } from '../network';\nimport { useConfig } from '../../config';\nexport function InjectedNetworkProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const {\n    reportError\n  } = useNetwork();\n  const {\n    pollingInterval\n  } = useConfig();\n  const [injectedProvider, setInjectedProvider] = useState();\n  useEffect(function () {\n    getInjectedProvider(pollingInterval).then(setInjectedProvider);\n  }, []);\n  const connect = useCallback(async () => {\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      return;\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      return injectedProvider;\n    } catch (err) {\n      reportError(err);\n    }\n  }, [injectedProvider]);\n  return _jsx(InjectedNetworkContext.Provider, {\n    value: {\n      injectedProvider,\n      connect\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/injectedNetwork/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,WAApB,EAAiC,SAAjC,EAA4C,QAA5C,QAA4D,OAA5D;AACA,SAAS,sBAAT,QAAuC,WAAvC;AAEA,SAAS,mBAAT,QAAoC,mCAApC;AACA,SAAS,UAAT,QAA2B,YAA3B;AACA,SAAS,SAAT,QAA0B,cAA1B;AAMA,OAAM,SAAU,uBAAV,OAA4E;AAAA,MAA1C;AAAE,IAAA;AAAF,GAA0C;AAChF,QAAM;AAAE,IAAA;AAAF,MAAkB,UAAU,EAAlC;AACA,QAAM;AAAE,IAAA;AAAF,MAAsB,SAAS,EAArC;AACA,QAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,EAAxD;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,mBAAmB,CAAC,eAAD,CAAnB,CAAqC,IAArC,CAA0C,mBAA1C;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAM,OAAO,GAAG,WAAW,CAAC,YAAW;AACrC,QAAI,CAAC,gBAAL,EAAuB;AACrB,MAAA,WAAW,CAAC,IAAI,KAAJ,CAAU,gCAAV,CAAD,CAAX;AACA;AACD;;AACD,QAAI;AACF,YAAM,gBAAgB,CAAC,IAAjB,CAAsB,qBAAtB,EAA6C,EAA7C,CAAN;AACA,aAAO,gBAAP;AACD,KAHD,CAGE,OAAO,GAAP,EAAiB;AACjB,MAAA,WAAW,CAAC,GAAD,CAAX;AACD;AACF,GAX0B,EAWxB,CAAC,gBAAD,CAXwB,CAA3B;AAaA,SACE,IAAA,CAAC,sBAAsB,CAAC,QAAxB,EAAgC;AAC9B,IAAA,KAAK,EAAE;AACL,MAAA,gBADK;AAEL,MAAA;AAFK,KADuB;AAK9B,IAAA,QAAQ,EAAE;AALoB,GAAhC,CADF;AASD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { InjectedNetworkContext } from './context';\nimport { getInjectedProvider } from '../../../helpers/injectedProvider';\nimport { useNetwork } from '../network';\nimport { useConfig } from '../../config';\nexport function InjectedNetworkProvider({ children }) {\n    const { reportError } = useNetwork();\n    const { pollingInterval } = useConfig();\n    const [injectedProvider, setInjectedProvider] = useState();\n    useEffect(function () {\n        getInjectedProvider(pollingInterval).then(setInjectedProvider);\n    }, []);\n    const connect = useCallback(async () => {\n        if (!injectedProvider) {\n            reportError(new Error('No injected provider available'));\n            return;\n        }\n        try {\n            await injectedProvider.send('eth_requestAccounts', []);\n            return injectedProvider;\n        }\n        catch (err) {\n            reportError(err);\n        }\n    }, [injectedProvider]);\n    return (_jsx(InjectedNetworkContext.Provider, { value: {\n            injectedProvider,\n            connect,\n        }, children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}