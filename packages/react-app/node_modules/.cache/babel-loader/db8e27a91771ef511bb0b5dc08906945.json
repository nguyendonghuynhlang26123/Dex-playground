{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { Web3Provider, Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents } from '../../../helpers/eip1193';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (err) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n\nexport function NetworkProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n\n    try {\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (err) {\n      reportError(err);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/network/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,WAApB,EAAiC,UAAjC,EAA6C,QAA7C,QAA6D,OAA7D;AACA,SAAS,cAAT,QAA+B,WAA/B;AACA,SAAS,mBAAT,EAA8B,eAA9B,QAAqD,WAArD;AAEA,SAA0B,YAA1B,EAA0D,QAA1D,QAA0E,0BAA1E;AACA,SAAS,yBAAT,QAA0C,0BAA1C;;AAMA,eAAe,eAAf,CAA+B,QAA/B,EAAwD;AACtD,MAAI;AACF,WAAO,MAAM,QAAQ,CAAC,SAAT,GAAqB,UAArB,EAAb;AACD,GAFD,CAEE,OAAO,GAAP,EAAiB;AACjB,QAAI,GAAG,CAAC,IAAJ,KAAa,uBAAjB,EAA0C;AACxC;AACA,aAAO,SAAP;AACD;;AACD,UAAM,GAAN;AACD;AACF;;AAED,OAAM,SAAU,eAAV,OAA4D;AAAA,MAAlC;AAAE,IAAA;AAAF,GAAkC;AAChE,QAAM,CAAC,OAAD,EAAU,QAAV,IAAsB,UAAU,CAAC,eAAD,EAAkB,mBAAlB,CAAtC;AACA,QAAM,CAAC,aAAD,EAAgB,gBAAhB,IAAoC,QAAQ,CAAa,MAAM,MAAM,SAAzB,CAAlD;AAEA,QAAM,MAAM,GAAG,WAAW,CACvB,UAAD,IAAiC;AAC/B,IAAA,QAAQ,CAAC;AAAE,MAAA,IAAI,EAAE,gBAAR;AAA0B,MAAA,OAAO,EAAE;AAAnC,KAAD,CAAR;AACD,GAHuB,EAIxB,CAAC,OAAD,CAJwB,CAA1B;AAOA,QAAM,WAAW,GAAG,WAAW,CAAE,KAAD,IAAiB;AAC/C,IAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACA,IAAA,QAAQ,CAAC;AAAE,MAAA,IAAI,EAAE,WAAR;AAAqB,MAAA;AAArB,KAAD,CAAR;AACD,GAH8B,EAG5B,EAH4B,CAA/B;AAKA,QAAM,UAAU,GAAG,WAAW,CAAC,MAAK;AAClC,IAAA,MAAM,CAAC;AACL,MAAA,QAAQ,EAAE;AADL,KAAD,CAAN;AAGD,GAJ6B,EAI3B,EAJ2B,CAA9B;AAMA,QAAM,YAAY,GAAG,WAAW,CAAE,KAAD,IAAU;AACzC,IAAA,UAAU;AACV,IAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAH+B,EAG7B,EAH6B,CAAhC;AAKA,QAAM,QAAQ,GAAG,WAAW,CAC1B,MAAO,QAAP,IAAuD;;;AACrD,UAAM,eAAe,GAAG,QAAQ,CAAC,UAAT,CAAoB,QAApB,IAAgC,QAAhC,GAA2C,IAAI,YAAJ,CAAiB,QAAjB,CAAnE;;AACA,QAAI;AACF,YAAM,OAAO,GAAG,MAAM,eAAe,CAAC,eAAD,CAArC;AACA,YAAM,OAAO,GAAG,CAAA,EAAA,GAAC,MAAM,eAAe,CAAC,UAAhB,EAAP,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,KAAA,CAApC,GAAoC,EAAA,CAAE,OAAtD;AACA,MAAA,aAAa;AACb,YAAM,kBAAkB,GAAG,yBAAyB,CAAE,eAAuB,CAAC,QAA1B,EAAoC,MAApC,EAA4C,YAA5C,CAApD;AACA,MAAA,gBAAgB,CAAC,MAAM,kBAAP,CAAhB;AACA,MAAA,MAAM,CAAC;AACL,QAAA,QAAQ,EAAE,eADL;AAEL,QAAA,OAFK;AAGL,QAAA,QAAQ,EAAE,OAAO,GAAG,CAAC,OAAD,CAAH,GAAe;AAH3B,OAAD,CAAN;AAKD,KAXD,CAWE,OAAO,GAAP,EAAiB;AACjB,MAAA,WAAW,CAAC,GAAD,CAAX;AACD;AACF,GAjByB,EAkB1B,CAAC,aAAD,CAlB0B,CAA5B;AAqBA,SAAO,IAAA,CAAC,cAAc,CAAC,QAAhB,EAAwB;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,OAAF;AAAW,MAAA,MAAX;AAAmB,MAAA,QAAnB;AAA6B,MAAA,UAA7B;AAAyC,MAAA;AAAzC,KAAR;AAAgE,IAAA,QAAQ,EAAE;AAA1E,GAAxB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { Web3Provider, Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents } from '../../../helpers/eip1193';\nasync function tryToGetAccount(provider) {\n    try {\n        return await provider.getSigner().getAddress();\n    }\n    catch (err) {\n        if (err.code === 'UNSUPPORTED_OPERATION') {\n            // readonly provider\n            return undefined;\n        }\n        throw err;\n    }\n}\nexport function NetworkProvider({ children }) {\n    const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n    const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n    const update = useCallback((newNetwork) => {\n        dispatch({ type: 'UPDATE_NETWORK', network: newNetwork });\n    }, [network]);\n    const reportError = useCallback((error) => {\n        console.error(error);\n        dispatch({ type: 'ADD_ERROR', error });\n    }, []);\n    const deactivate = useCallback(() => {\n        update({\n            accounts: [],\n        });\n    }, []);\n    const onDisconnect = useCallback((error) => {\n        deactivate();\n        reportError(error);\n    }, []);\n    const activate = useCallback(async (provider) => {\n        var _a;\n        const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n        try {\n            const account = await tryToGetAccount(wrappedProvider);\n            const chainId = (_a = (await wrappedProvider.getNetwork())) === null || _a === void 0 ? void 0 : _a.chainId;\n            onUnsubscribe();\n            const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n            setOnUnsubscribe(() => clearSubscriptions);\n            update({\n                provider: wrappedProvider,\n                chainId,\n                accounts: account ? [account] : [],\n            });\n        }\n        catch (err) {\n            reportError(err);\n        }\n    }, [onUnsubscribe]);\n    return _jsx(NetworkContext.Provider, { value: { network, update, activate, deactivate, reportError }, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}