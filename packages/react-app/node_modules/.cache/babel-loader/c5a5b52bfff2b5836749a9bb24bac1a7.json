{"ast":null,"code":"import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useNetwork } from '../providers';\n\nfunction warnOnInvalidContractCall(call) {\n  console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);\n}\n\nfunction encodeCallData(call, chainId) {\n  if (!call) {\n    return undefined;\n  }\n\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: call.address,\n      data: call.abi.encodeFunctionData(call.method, call.args),\n      chainId\n    };\n  } catch (_a) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n}\n/**\n * @public\n * @deprecated Use {@link useCalls} instead.\n */\n\n\nexport function useContractCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useContractCalls([call], queryParams)[0];\n}\n/**\n * @public\n * @deprecated Use {@link useCall} instead.\n */\n\nexport function useContractCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  const {\n    network\n  } = useNetwork();\n  const chainId = (_a = queryParams.chainId) !== null && _a !== void 0 ? _a : network.chainId;\n  const results = useChainCalls(calls.map(call => chainId !== undefined ? encodeCallData(call, chainId) : undefined));\n  return useMemo(() => results.map((result, idx) => {\n    const call = calls[idx];\n\n    if (result === '0x') {\n      warnOnInvalidContractCall(call);\n      return undefined;\n    }\n\n    return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n  }), [results]);\n}","map":{"version":3,"sources":["../../../../src/hooks/useContractCall.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,OAAxB;AAEA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAkB,UAAlB,QAAoC,cAApC;;AAKA,SAAS,yBAAT,CAAmC,IAAnC,EAA6D;AAC3D,EAAA,OAAO,CAAC,IAAR,CACE,kCAAkC,IAAI,IAAI,IAAI,CAAC,OAAO,WAAW,IAAI,IAAI,IAAI,CAAC,MAAM,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,EADhH;AAGD;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAAoD,OAApD,EAAoE;AAClE,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,SAAP;AACD;;AACD,MAAI,CAAC,IAAI,CAAC,OAAN,IAAiB,CAAC,IAAI,CAAC,MAA3B,EAAmC;AACjC,IAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,WAAO,SAAP;AACD;;AACD,MAAI;AACF,WAAO;AAAE,MAAA,OAAO,EAAE,IAAI,CAAC,OAAhB;AAAyB,MAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,kBAAT,CAA4B,IAAI,CAAC,MAAjC,EAAyC,IAAI,CAAC,IAA9C,CAA/B;AAAoF,MAAA;AAApF,KAAP;AACD,GAFD,CAEE,OAAA,EAAA,EAAM;AACN,IAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,WAAO,SAAP;AACD;AACF;AAaD;;;AAGG;;;AACH,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAmF;AAAA,MAA7B,WAA6B,uEAAF,EAAE;AACvF,SAAO,gBAAgB,CAAC,CAAC,IAAD,CAAD,EAAS,WAAT,CAAhB,CAAsC,CAAtC,CAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,gBAAV,CACJ,KADI,EAEyB;AAAA,MAA7B,WAA6B,uEAAF,EAAE;;;;AAE7B,QAAM;AAAE,IAAA;AAAF,MAAc,UAAU,EAA9B;AACA,QAAM,OAAO,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,OAAZ,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,OAAO,CAAC,OAA/C;AAEA,QAAM,OAAO,GAAG,aAAa,CAC3B,KAAK,CAAC,GAAN,CAAW,IAAD,IAAW,OAAO,KAAK,SAAZ,GAAwB,cAAc,CAAC,IAAD,EAAO,OAAP,CAAtC,GAAwD,SAA7E,CAD2B,CAA7B;AAIA,SAAO,OAAO,CACZ,MACE,OAAO,CAAC,GAAR,CAAY,CAAC,MAAD,EAAS,GAAT,KAAgB;AAC1B,UAAM,IAAI,GAAG,KAAK,CAAC,GAAD,CAAlB;;AACA,QAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,MAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,aAAO,SAAP;AACD;;AACD,WAAO,IAAI,IAAI,MAAR,GAAkB,IAAI,CAAC,GAAL,CAAS,oBAAT,CAA8B,IAAI,CAAC,MAAnC,EAA2C,MAA3C,CAAlB,GAAiF,SAAxF;AACD,GAPD,CAFU,EAUZ,CAAC,OAAD,CAVY,CAAd;AAYD","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useNetwork } from '../providers';\nfunction warnOnInvalidContractCall(call) {\n    console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);\n}\nfunction encodeCallData(call, chainId) {\n    if (!call) {\n        return undefined;\n    }\n    if (!call.address || !call.method) {\n        warnOnInvalidContractCall(call);\n        return undefined;\n    }\n    try {\n        return { address: call.address, data: call.abi.encodeFunctionData(call.method, call.args), chainId };\n    }\n    catch (_a) {\n        warnOnInvalidContractCall(call);\n        return undefined;\n    }\n}\n/**\n * @public\n * @deprecated Use {@link useCalls} instead.\n */\nexport function useContractCall(call, queryParams = {}) {\n    return useContractCalls([call], queryParams)[0];\n}\n/**\n * @public\n * @deprecated Use {@link useCall} instead.\n */\nexport function useContractCalls(calls, queryParams = {}) {\n    var _a;\n    const { network } = useNetwork();\n    const chainId = (_a = queryParams.chainId) !== null && _a !== void 0 ? _a : network.chainId;\n    const results = useChainCalls(calls.map((call) => (chainId !== undefined ? encodeCallData(call, chainId) : undefined)));\n    return useMemo(() => results.map((result, idx) => {\n        const call = calls[idx];\n        if (result === '0x') {\n            warnOnInvalidContractCall(call);\n            return undefined;\n        }\n        return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n    }), [results]);\n}\n//# sourceMappingURL=useContractCall.js.map"]},"metadata":{},"sourceType":"module"}